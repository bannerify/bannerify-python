"""Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT."""

from __future__ import annotations
from .errbadrequest import ErrBadRequestData
from .errfetchimageerror import ErrFetchImageErrorData
from bannerify import utils
from bannerify.types import BaseModel, Nullable, UNSET_SENTINEL
from bannerify.utils import FieldMetadata, QueryParamMetadata
import pydantic
from pydantic import model_serializer
from typing import List, TypedDict, Union
from typing_extensions import Annotated


class GetV1TemplatesIDRequestTypedDict(TypedDict):
    api_key: str
    

class GetV1TemplatesIDRequest(BaseModel):
    api_key: Annotated[str, pydantic.Field(alias="apiKey"), FieldMetadata(query=QueryParamMetadata(style="form", explode=True))]
    

GetV1TemplatesIDResponseResponseBodyUnion = Union[ErrBadRequestData, ErrFetchImageErrorData]
r"""The server cannot or will not process the request due to something that is perceived to be a client error (e.g., malformed request syntax, invalid request message framing, or deceptive request routing)."""


class GetV1TemplatesIDResponseResponseBody(Exception):
    r"""The server cannot or will not process the request due to something that is perceived to be a client error (e.g., malformed request syntax, invalid request message framing, or deceptive request routing)."""
    data: GetV1TemplatesIDResponseResponseBodyUnion

    def __init__(self, data: GetV1TemplatesIDResponseResponseBodyUnion):
        self.data = data

    def __str__(self) -> str:
        return utils.marshal_json(self.data, GetV1TemplatesIDResponseResponseBodyUnion)


class LayersTypedDict(TypedDict):
    name: str
    r"""The name of the layer"""
    id: str
    r"""The id of the layer"""
    type: str
    r"""The type of the layer"""
    suggest_input: Nullable[str]
    r"""The suggest input of the layer"""
    

class Layers(BaseModel):
    name: str
    r"""The name of the layer"""
    id: str
    r"""The id of the layer"""
    type: str
    r"""The type of the layer"""
    suggest_input: Annotated[Nullable[str], pydantic.Field(alias="suggestInput")]
    r"""The suggest input of the layer"""
    
    @model_serializer(mode="wrap")
    def serialize_model(self, handler):
        optional_fields = []
        nullable_fields = ["suggestInput"]
        null_default_fields = []

        serialized = handler(self)

        m = {}

        for n, f in self.model_fields.items():
            k = f.alias or n
            val = serialized.get(k)

            optional_nullable = k in optional_fields and k in nullable_fields
            is_set = (self.__pydantic_fields_set__.intersection({n}) or k in null_default_fields) # pylint: disable=no-member

            if val is not None and val != UNSET_SENTINEL:
                m[k] = val
            elif val != UNSET_SENTINEL and (
                not k in optional_fields or (optional_nullable and is_set)
            ):
                m[k] = val

        return m
        

class GetV1TemplatesIDResponseBodyTypedDict(TypedDict):
    r"""Template details"""
    
    name: str
    r"""The name of the template"""
    id: str
    r"""The id of the template"""
    layers: List[LayersTypedDict]
    r"""The layers of the template"""
    

class GetV1TemplatesIDResponseBody(BaseModel):
    r"""Template details"""
    
    name: str
    r"""The name of the template"""
    id: str
    r"""The id of the template"""
    layers: List[Layers]
    r"""The layers of the template"""
    
